Operator Overloading
===================================================================================
Overload the following operators in the provided Mystring class

To gain experience overloading operators, you should do this challenge twice.
1. Overload the operators using member functions
2. Overload the operators using non-member functions

Please do it once using member methods and then again using non-member functions.

Here is a list of some of the operators that you can overload for this class:
1.  -   - unary minus. Return the lowercase version of the object's string
          -> s1
2.  ==  - Return true if the two strings are equal.
          -> (s1 == s2)
3.  !=  - Return true if the two strings are not equal.
          -> (s1 != s2)
4.  <   - Return true if the lhs string is lexically less than the rhs string
          -> (s1 < s2)
5.  >   - Return true if the lhs string is lexically greater than the rhs string
          -> (s1 > s2)
6.  +   - Concatenation. Return an object that concatenates the lhs and rhs
          -> s1 + s2
7.  +=  - Concatenate the rhs string to the lhs string and store the result in lhs object
          -> s1 += s2
8.  *   - Repeat. Result in a string that is copied n times
          -> s2 * 3;    contoh: s2 = "abc";
                                s1 = s2 * 3;
                                s1 will result in "abcabcabc"
9.  *=  - Repeat the string on the lhs n times and store the result back in the lhs object
          -> s1 = "abc"
             s1 *= 4;
             s1 = s1 will result "abcabcabcabc"

If you wish to overload the ++ and --operators remember that they have pre and post versions.

The semantics should be as follow (this shows the member method version);

Mystring &operator++() {        // pre-increment
    // do what ever you want increment do to - maybe make all characters uppercase?
    return *this;
}

// Note that post-increment returns a Mystring by value not by reference
Mystring operator++(int) {      // post-increment
    Mystring temp (*this);      // make a copy
    operator++();               // call pre-increment - make sure you call pre-increment
    return temp;                // return the old value
}

Have fun! Thinke of some other operators that might be useful!
Don't worry if they all don't make sense -- this is an exercise about learning how to overload
operators.

Hints:
1. Take advantage of the std::strcmp function for the equality operator
2. The += and *= operators should return a Mystirng &
3. Rather than duplicate code in the += and *= functions, use the + and * operators which you 
   have already overloaded!